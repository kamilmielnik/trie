"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserialize = exports.serialize = void 0;
var SEPARATOR = ",";
var OPEN_PARENS = "(";
var CLOSE_PARENS = ")";
exports.serialize = function (node, character) {
    if (character === void 0) { character = ""; }
    var letters = Object.keys(node).filter(function (key) { return key.length === 1; });
    var hasMore = letters.length > 0;
    var serialized = "";
    if (node.wordEnd) {
        serialized += character;
    }
    if (node.wordEnd && hasMore) {
        serialized += SEPARATOR;
    }
    if (hasMore) {
        serialized += character;
        serialized += OPEN_PARENS;
        serialized += letters
            .map(function (letter) { return exports.serialize(node[letter], letter); })
            .join(SEPARATOR);
        serialized += CLOSE_PARENS;
    }
    return serialized;
};
exports.deserialize = function (serialized) {
    var stack = [];
    var node = {};
    var i = 1;
    while (i < serialized.length - 1) {
        var character = serialized[i];
        var nextCharacter = serialized[++i];
        if (character === CLOSE_PARENS) {
            node = stack.pop();
        }
        else if (nextCharacter === SEPARATOR) {
            node[character] = { wordEnd: true };
            ++i;
        }
        else if (nextCharacter === CLOSE_PARENS) {
            node[character] = { wordEnd: true };
            node = stack.pop();
            ++i;
        }
        else if (nextCharacter === OPEN_PARENS) {
            stack.push(node);
            var newNode = node[character] || {};
            node[character] = newNode;
            node = newNode;
            ++i;
        }
    }
    return node;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUN0QixJQUFNLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDeEIsSUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBRVosUUFBQSxTQUFTLEdBQUcsVUFBQyxJQUFJLEVBQUUsU0FBYztJQUFkLDBCQUFBLEVBQUEsY0FBYztJQUM1QyxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFoQixDQUFnQixDQUFDLENBQUM7SUFDcEUsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbkMsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNoQixVQUFVLElBQUksU0FBUyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sRUFBRTtRQUMzQixVQUFVLElBQUksU0FBUyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxPQUFPLEVBQUU7UUFDWCxVQUFVLElBQUksU0FBUyxDQUFDO1FBQ3hCLFVBQVUsSUFBSSxXQUFXLENBQUM7UUFDMUIsVUFBVSxJQUFJLE9BQU87YUFDbEIsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsaUJBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQS9CLENBQStCLENBQUM7YUFDaEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25CLFVBQVUsSUFBSSxZQUFZLENBQUM7S0FDNUI7SUFDRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFFVyxRQUFBLFdBQVcsR0FBRyxVQUFDLFVBQVU7SUFDcEMsSUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVWLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2hDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV0QyxJQUFJLFNBQVMsS0FBSyxZQUFZLEVBQUU7WUFDOUIsSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNwQjthQUFNLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDcEMsRUFBRSxDQUFDLENBQUM7U0FDTDthQUFNLElBQUksYUFBYSxLQUFLLFlBQVksRUFBRTtZQUN6QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDcEMsSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNuQixFQUFFLENBQUMsQ0FBQztTQUNMO2FBQU0sSUFBSSxhQUFhLEtBQUssV0FBVyxFQUFFO1lBQ3hDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakIsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDO1lBQzFCLElBQUksR0FBRyxPQUFPLENBQUM7WUFDZixFQUFFLENBQUMsQ0FBQztTQUNMO0tBQ0Y7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNFUEFSQVRPUiA9IFwiLFwiO1xuY29uc3QgT1BFTl9QQVJFTlMgPSBcIihcIjtcbmNvbnN0IENMT1NFX1BBUkVOUyA9IFwiKVwiO1xuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplID0gKG5vZGUsIGNoYXJhY3RlciA9IFwiXCIpID0+IHtcbiAgY29uc3QgbGV0dGVycyA9IE9iamVjdC5rZXlzKG5vZGUpLmZpbHRlcigoa2V5KSA9PiBrZXkubGVuZ3RoID09PSAxKTtcbiAgY29uc3QgaGFzTW9yZSA9IGxldHRlcnMubGVuZ3RoID4gMDtcbiAgbGV0IHNlcmlhbGl6ZWQgPSBcIlwiO1xuICBpZiAobm9kZS53b3JkRW5kKSB7XG4gICAgc2VyaWFsaXplZCArPSBjaGFyYWN0ZXI7XG4gIH1cbiAgaWYgKG5vZGUud29yZEVuZCAmJiBoYXNNb3JlKSB7XG4gICAgc2VyaWFsaXplZCArPSBTRVBBUkFUT1I7XG4gIH1cbiAgaWYgKGhhc01vcmUpIHtcbiAgICBzZXJpYWxpemVkICs9IGNoYXJhY3RlcjtcbiAgICBzZXJpYWxpemVkICs9IE9QRU5fUEFSRU5TO1xuICAgIHNlcmlhbGl6ZWQgKz0gbGV0dGVyc1xuICAgICAgLm1hcCgobGV0dGVyKSA9PiBzZXJpYWxpemUobm9kZVtsZXR0ZXJdLCBsZXR0ZXIpKVxuICAgICAgLmpvaW4oU0VQQVJBVE9SKTtcbiAgICBzZXJpYWxpemVkICs9IENMT1NFX1BBUkVOUztcbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn07XG5cbmV4cG9ydCBjb25zdCBkZXNlcmlhbGl6ZSA9IChzZXJpYWxpemVkKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gW107XG4gIGxldCBub2RlID0ge307XG4gIGxldCBpID0gMTtcblxuICB3aGlsZSAoaSA8IHNlcmlhbGl6ZWQubGVuZ3RoIC0gMSkge1xuICAgIGNvbnN0IGNoYXJhY3RlciA9IHNlcmlhbGl6ZWRbaV07XG4gICAgY29uc3QgbmV4dENoYXJhY3RlciA9IHNlcmlhbGl6ZWRbKytpXTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENMT1NFX1BBUkVOUykge1xuICAgICAgbm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAobmV4dENoYXJhY3RlciA9PT0gU0VQQVJBVE9SKSB7XG4gICAgICBub2RlW2NoYXJhY3Rlcl0gPSB7IHdvcmRFbmQ6IHRydWUgfTtcbiAgICAgICsraTtcbiAgICB9IGVsc2UgaWYgKG5leHRDaGFyYWN0ZXIgPT09IENMT1NFX1BBUkVOUykge1xuICAgICAgbm9kZVtjaGFyYWN0ZXJdID0geyB3b3JkRW5kOiB0cnVlIH07XG4gICAgICBub2RlID0gc3RhY2sucG9wKCk7XG4gICAgICArK2k7XG4gICAgfSBlbHNlIGlmIChuZXh0Q2hhcmFjdGVyID09PSBPUEVOX1BBUkVOUykge1xuICAgICAgc3RhY2sucHVzaChub2RlKTtcbiAgICAgIGNvbnN0IG5ld05vZGUgPSBub2RlW2NoYXJhY3Rlcl0gfHwge307XG4gICAgICBub2RlW2NoYXJhY3Rlcl0gPSBuZXdOb2RlO1xuICAgICAgbm9kZSA9IG5ld05vZGU7XG4gICAgICArK2k7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59O1xuIl19